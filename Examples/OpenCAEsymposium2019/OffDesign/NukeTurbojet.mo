within PropulsionSystem.Examples.OpenCAEsymposium2019.OffDesign;

model NukeTurbojet
  extends Modelica.Icons.Example;
  package engineAir = Modelica.Media.Air.DryAirNasa;
  //-----
  PropulsionSystem.Elements.BasicElements.FlightToEngine flightToEngine1(redeclare package Medium = engineAir, MN = 0.8, alt = 10000) annotation(
    Placement(visible = true, transformation(origin = {-90, -10}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
  PropulsionSystem.Elements.BasicElements.Inlet Inlt010(redeclare package Medium = engineAir) annotation(
    Placement(visible = true, transformation(origin = {-60, -10}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
  PropulsionSystem.Elements.BasicElements.Duct Duct030(redeclare package Medium = engineAir, dPqPdes = 0.02) annotation(
    Placement(visible = true, transformation(origin = {0, -10}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
  PropulsionSystem.Elements.BasicElements.HeatInjector Brn036(redeclare package Medium = engineAir, T1_init = 700, T2_init = 1600, T_wall_1(displayUnit = "K"), TtOutletDes(displayUnit = "K") = 1600, h1_init = 700 * 1000, h2_init = 1600 * 1000, p1_init = 20 * 101.3 * 1000, p2_init = 20 * 101.3 * 1000, switchInput_TtOutlet = PropulsionSystem.Types.switches.switch_parameter_input.asCalculated) annotation(
    Placement(visible = true, transformation(origin = {30, -10}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
  PropulsionSystem.Elements.BasicElements.Duct Duct045(redeclare package Medium = engineAir, dPqPdes = 0.03) annotation(
    Placement(visible = true, transformation(origin = {120, -10}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
  PropulsionSystem.Elements.BasicElements.NozzleConv_defAmech Nzl070(redeclare package Medium = engineAir, Amech_th_def = 0.0195384) annotation(
    Placement(visible = true, transformation(origin = {150, -10}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
  PropulsionSystem.Elements.BasicElements.EnginePerformance perf001 annotation(
    Placement(visible = true, transformation(origin = {180, -50}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
  //-----
  PropulsionSystem.Elements.BasicElements.Turbine_exponentialCurve Trb041(redeclare package Medium = engineAir, PRdes = 2.42403, Tdes_1(displayUnit = "K") = 1600, dmDes_1 = 10, pDes_1 = 1.8e6, switchDef_NcDes_1 = PropulsionSystem.Types.switches.switch_defineDesValue.calcByDesStates, switchDef_WcDes_1 = PropulsionSystem.Types.switches.switch_defineDesValue.calcByDesStates, switchDef_s_PR_CurveDes = PropulsionSystem.Types.switches.switch_defineDesValue.calcByDesStates, switchDef_s_Wc_CurveDes = PropulsionSystem.Types.switches.switch_defineDesValue.calcByDesStates, switchDef_s_eff_CurveDes = PropulsionSystem.Types.switches.switch_defineDesValue.calcByDesStates, switchInput_PR = PropulsionSystem.Types.switches.switch_parameter_input.calc_Subelement, switchInput_Wc_1 = PropulsionSystem.Types.switches.switch_parameter_input.calc_Subelement, switchInput_eff = PropulsionSystem.Types.switches.switch_parameter_input.calc_Subelement) annotation(
    Placement(visible = true, transformation(origin = {90, -10}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
  PropulsionSystem.Elements.BasicElements.Compressor_Map_WcPReff Cmp020(redeclare package Medium = engineAir, NmechDes = 9000, PRdes = 20, Tdes_1(displayUnit = "K") = 288.16, dmDes_1 = 10, effDes = 0.80, pDes_1 = 96257.5, pathName_tableFile = "./tableData/table_Cmp_theta_NcqNcDes_001.txt", switchDef_s_PR_CurveDes = PropulsionSystem.Types.switches.switch_defineDesValue.calcByDesStates, switchInput_eff = PropulsionSystem.Types.switches.switch_parameter_input.use_desValue, switchSmoothness = Modelica.Blocks.Types.Smoothness.ContinuousDerivative, switchUseMapDataFile_PR = true, switchUseMapDataFile_Wc = true, switchUseMapDataFile_eff = true, thetaCurveDes = 3.14 / 4) annotation(
    Placement(visible = true, transformation(origin = {-30, -10}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
  inner EngineSimEnvironment environment annotation(
    Placement(visible = true, transformation(origin = {-90, 90}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
  inner Modelica.Fluid.System system annotation(
    Placement(visible = true, transformation(origin = {-70, 90}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));

  model MoltenSaltReactor
    extends Modelica.Icons.Example;
    //----------
    package reactorFuel = Nuclear.FuelSaltLiFBeF2(final singleState = true, final enthalpyOfT = true);
    // redeclare package Medium = reactorFuel
    //package liquid2 = Modelica.Media.Water.StandardWaterOnePhase;
    //package engineAir = Modelica.Media.Air.DryAirNasa;
    // redeclare package Medium = engineAir
    //----------
    inner Modelica.Fluid.System system annotation(
      Placement(visible = true, transformation(origin = {-90, 90}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
    Modelica.Blocks.Sources.Ramp ramp1(duration = 100, height = 0, offset = 0, startTime = 20) annotation(
      Placement(visible = true, transformation(origin = {-90, 60}, extent = {{-10, -10}, {10, 10}}, rotation = -90)));
    Modelica.Fluid.Vessels.ClosedVolume volume(redeclare package Medium = reactorFuel, T_start = 1000, V = 1e-6, nPorts = 3, use_HeatTransfer = true, use_portsData = false) annotation(
      Placement(visible = true, transformation(origin = {10, -20}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
    Modelica.Fluid.Pipes.StaticPipe pipe(redeclare package Medium = reactorFuel, diameter = 0.1, length = 0.5) annotation(
      Placement(visible = true, transformation(origin = {94, -40}, extent = {{-10, -10}, {10, 10}}, rotation = -90)));
    Modelica.Fluid.Sensors.Temperature temperature(redeclare package Medium = reactorFuel) annotation(
      Placement(visible = true, transformation(origin = {40, -10}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
    Modelica.Blocks.Math.Add add1 annotation(
      Placement(visible = true, transformation(origin = {40, 40}, extent = {{-10, -10}, {10, 10}}, rotation = 90)));
    Modelica.Blocks.Sources.Ramp Tfuel_ref(duration = 300, height = 0, offset = -1400, startTime = 100) annotation(
      Placement(visible = true, transformation(origin = {70, 20}, extent = {{-10, -10}, {10, 10}}, rotation = 180)));
    Modelica.Blocks.Math.Gain Tfuel_rho_feedback(k = -9.5) annotation(
      Placement(visible = true, transformation(origin = {20, 70}, extent = {{-10, -10}, {10, 10}}, rotation = 180)));
    Modelica.Blocks.Math.Add3 add31 annotation(
      Placement(visible = true, transformation(origin = {-70, 30}, extent = {{-10, -10}, {10, 10}}, rotation = -90)));
    Modelica.Blocks.Sources.Constant rho0(k = -2) annotation(
      Placement(visible = true, transformation(origin = {-50, 70}, extent = {{-10, -10}, {10, 10}}, rotation = -90)));
    Nuclear.PointKineticMoltenSaltReactor_P1 pointKineticMoltenSaltReactor_P11(NominalPower = 1e7 / 1e6, T_ref = 600) annotation(
      Placement(visible = true, transformation(origin = {-40, 10}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
    Modelica.Fluid.Sources.Boundary_pT tank(redeclare package Medium = reactorFuel, nPorts = 1, p = 101.3 * 1000) annotation(
      Placement(visible = true, transformation(origin = {-50, -100}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
    Modelica.Fluid.Sensors.Temperature temperature1(redeclare package Medium = reactorFuel) annotation(
      Placement(visible = true, transformation(origin = {10, -90}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
    Modelica.Fluid.Sources.MassFlowSource_T boundary(redeclare package Medium = reactorFuel, nPorts = 1, use_T_in = true, use_m_flow_in = true) annotation(
      Placement(visible = true, transformation(origin = {-10, -50}, extent = {{-10, -10}, {10, 10}}, rotation = 90)));
    Modelica.Fluid.Vessels.ClosedVolume volume1(redeclare package Medium = reactorFuel, T_start = 1000, V = 10e-6, nPorts = 3, use_HeatTransfer = true, use_portsData = false) annotation(
      Placement(visible = true, transformation(origin = {-20, -100}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
    Modelica.Fluid.Sensors.Temperature temperature2(redeclare package Medium = reactorFuel) annotation(
      Placement(visible = true, transformation(origin = {40, -104}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
    Modelica.Fluid.Vessels.ClosedVolume volume2(redeclare package Medium = reactorFuel, T_start = 1000, V = 1e-6, nPorts = 3, use_HeatTransfer = true, use_portsData = false) annotation(
      Placement(visible = true, transformation(origin = {10, -140}, extent = {{-10, -10}, {10, 10}}, rotation = 180)));
    Modelica.Thermal.HeatTransfer.Components.Convection convection1 annotation(
      Placement(visible = true, transformation(origin = {20, -170}, extent = {{-10, -10}, {10, 10}}, rotation = -90)));
    Modelica.Blocks.Sources.Constant const(k = 1e5) annotation(
      Placement(visible = true, transformation(origin = {50, -170}, extent = {{10, -10}, {-10, 10}}, rotation = 0)));
    Modelica.Thermal.HeatTransfer.Interfaces.HeatPort_b port_b annotation(
      Placement(visible = true, transformation(origin = {20, -200}, extent = {{-10, -10}, {10, 10}}, rotation = 0), iconTransformation(origin = {0, -100}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
    Modelica.Blocks.Interfaces.RealInput u_rho_control annotation(
      Placement(visible = true, transformation(origin = {-120, 0}, extent = {{-20, -20}, {20, 20}}, rotation = 0), iconTransformation(origin = {-110, 40}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
    Modelica.Blocks.Interfaces.RealInput u_m_flow_fuel annotation(
      Placement(visible = true, transformation(origin = {-120, -70}, extent = {{-20, -20}, {20, 20}}, rotation = 0), iconTransformation(origin = {-110, -40}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
  equation
    connect(volume.ports[2], pipe.port_a) annotation(
      Line(points = {{10, -30}, {94, -30}}, color = {0, 127, 255}));
    connect(volume2.ports[2], pipe.port_b) annotation(
      Line(points = {{10, -130}, {94, -130}, {94, -50}}, color = {0, 127, 255}));
    connect(u_m_flow_fuel, boundary.m_flow_in) annotation(
      Line(points = {{-120, -70}, {-18, -70}, {-18, -60}}, color = {0, 0, 127}));
    connect(u_rho_control, pointKineticMoltenSaltReactor_P11.rho_control) annotation(
      Line(points = {{-120, 0}, {-72, 0}, {-72, 5.5}, {-49, 5.5}}, color = {0, 0, 127}));
    connect(convection1.Gc, const.y) annotation(
      Line(points = {{30, -170}, {40, -170}, {40, -170}, {38, -170}}, color = {0, 0, 127}));
    connect(volume2.heatPort, convection1.solid) annotation(
      Line(points = {{20, -140}, {20, -160}}, color = {191, 0, 0}));
    connect(convection1.fluid, port_b) annotation(
      Line(points = {{20, -180}, {20, -200}}, color = {191, 0, 0}));
    connect(volume1.ports[2], volume2.ports[1]) annotation(
      Line(points = {{-20, -110}, {-20, -130}, {10, -130}}, color = {0, 127, 255}, thickness = 0.5));
    connect(volume2.ports[3], temperature2.port) annotation(
      Line(points = {{10, -130}, {10, -118}, {40, -118}, {40, -114}}, color = {0, 127, 255}));
    connect(volume1.ports[3], temperature1.port) annotation(
      Line(points = {{-20, -110}, {10, -110}, {10, -100}, {10, -100}}, color = {0, 127, 255}));
    connect(tank.ports[1], volume1.ports[1]) annotation(
      Line(points = {{-40, -100}, {-40, -110}, {-20, -110}}, color = {0, 127, 255}, thickness = 0.5));
    connect(temperature1.T, boundary.T_in) annotation(
      Line(points = {{17, -90}, {27, -90}, {27, -72}, {-14, -72}, {-14, -62}}, color = {0, 0, 127}));
    connect(boundary.ports[1], volume.ports[1]) annotation(
      Line(points = {{-10, -40}, {-10, -30}, {10, -30}}, color = {0, 127, 255}, thickness = 0.5));
    connect(add31.y, pointKineticMoltenSaltReactor_P11.rho) annotation(
      Line(points = {{-70, 19}, {-70, 16}, {-49, 16}}, color = {0, 0, 127}));
    connect(pointKineticMoltenSaltReactor_P11.port_b, volume.heatPort) annotation(
      Line(points = {{-31, 17}, {-22, 17}, {-22, -20}, {0, -20}}, color = {191, 0, 0}));
    connect(add31.u2, rho0.y) annotation(
      Line(points = {{-70, 42}, {-70, 54}, {-50, 54}, {-50, 58}}, color = {0, 0, 127}));
    connect(add31.u1, Tfuel_rho_feedback.y) annotation(
      Line(points = {{-62, 42}, {-62, 48}, {-8, 48}, {-8, 70}, {9, 70}}, color = {0, 0, 127}));
    connect(ramp1.y, add31.u3) annotation(
      Line(points = {{-90, 49}, {-90, 46}, {-78, 46}, {-78, 42}}, color = {0, 0, 127}));
    connect(Tfuel_rho_feedback.u, add1.y) annotation(
      Line(points = {{32, 70}, {40, 70}, {40, 51}}, color = {0, 0, 127}));
    connect(add1.u2, Tfuel_ref.y) annotation(
      Line(points = {{46, 28}, {46, 20}, {59, 20}}, color = {0, 0, 127}));
    connect(temperature.T, add1.u1) annotation(
      Line(points = {{47, -10}, {47, -10.5}, {55, -10.5}, {55, 13}, {34, 13}, {34, 28}}, color = {0, 0, 127}));
    connect(volume.ports[3], temperature.port) annotation(
      Line(points = {{10, -30}, {25, -30}, {25, -20}, {40, -20}}, color = {0, 127, 255}));
    annotation(
      Diagram(coordinateSystem(extent = {{-100, -200}, {100, 100}}), graphics = {Rectangle(origin = {-28, 33}, pattern = LinePattern.Dash, extent = {{-80, 73}, {106, -65}}), Text(origin = {10, 94}, extent = {{-34, 6}, {34, -6}}, textString = "reactor core")}),
      __OpenModelica_commandLineOptions = "",
      Icon(graphics = {Rectangle(origin = {-66, 75}, fillColor = {240, 240, 240}, fillPattern = FillPattern.Solid, extent = {{-34, 25}, {166, -175}}), Text(origin = {-10, -52}, extent = {{-90, -8}, {110, -38}}, textString = "reactor"), Bitmap(origin = {-4, 37}, extent = {{-86, 63}, {94, -97}}, imageSource = "")}, coordinateSystem(initialScale = 0.1)),
      experiment(StartTime = 0, StopTime = 1, Tolerance = 1e-6, Interval = 0.002),
      __OpenModelica_simulationFlags(lv = "LOG_STATS", outputFormat = "mat", s = "dassl"));
  end MoltenSaltReactor;

  PropulsionSystem.Examples.OpenCAEsymposium2019.OffDesign.NukeTurbojet.MoltenSaltReactor moltenSaltReactor1 annotation(
    Placement(visible = true, transformation(origin = {40, 30}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
  Modelica.Blocks.Sources.Ramp ramp_m_flow_fuel(duration = 10, height = 10, offset = 10, startTime = 40) annotation(
    Placement(visible = true, transformation(origin = {10, 30}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
  Modelica.Blocks.Sources.Constant dmy_const_dmFuel annotation(
    Placement(visible = true, transformation(origin = {138, -60}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
  Modelica.Blocks.Sources.Ramp ramp1(duration = 10, height = -1600, offset = 1600, startTime = 10) annotation(
    Placement(visible = true, transformation(origin = {110, 30}, extent = {{10, -10}, {-10, 10}}, rotation = 0)));
  Modelica.Fluid.Sensors.TemperatureTwoPort temperature(redeclare package Medium = engineAir) annotation(
    Placement(visible = true, transformation(origin = {60, -2}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
  Modelica.Blocks.Sources.Ramp ramp_rho_control(duration = 10, height = 2000, offset = -2000, startTime = 10) annotation(
    Placement(visible = true, transformation(origin = {10, 70}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
equation
  connect(ramp_rho_control.y, moltenSaltReactor1.u_rho_control) annotation(
    Line(points = {{22, 70}, {24, 70}, {24, 34}, {30, 34}, {30, 34}}, color = {0, 0, 127}));
  connect(Cmp020.flange_2, Trb041.flange_1) annotation(
    Line(points = {{-20, -10}, {-14, -10}, {-14, -32}, {76, -32}, {76, -10}, {80, -10}}));
  connect(Brn036.port_2, temperature.port_a) annotation(
    Line(points = {{40, -2}, {50, -2}, {50, -2}, {50, -2}}, color = {0, 127, 255}));
  connect(temperature.port_b, Trb041.port_1) annotation(
    Line(points = {{70, -2}, {80, -2}, {80, -2}, {80, -2}}, color = {0, 127, 255}));
  connect(Duct030.port_2, Brn036.port_1) annotation(
    Line(points = {{10, -2}, {20, -2}}, color = {0, 127, 255}));
  connect(moltenSaltReactor1.port_b, Brn036.HeatPort_1) annotation(
    Line(points = {{40, 20}, {40, 10}, {30, 10}, {30, 0}}, color = {191, 0, 0}));
  connect(Cmp020.port_2, Duct030.port_1) annotation(
    Line(points = {{-20, -2}, {-10, -2}}, color = {0, 127, 255}));
  connect(Trb041.port_2, Duct045.port_1) annotation(
    Line(points = {{100, -2}, {110, -2}}, color = {0, 127, 255}));
  connect(Duct045.port_2, Nzl070.port_1) annotation(
    Line(points = {{130, -2}, {140, -2}}, color = {0, 127, 255}));
  connect(Nzl070.Fg_out, perf001.Fg_in) annotation(
    Line(points = {{155, -10}, {163.3, -10}, {163.3, -41}, {169, -41}}, color = {0, 0, 127}));
  connect(flightToEngine1.port_fluidAmb, Nzl070.port_2) annotation(
    Line(points = {{-90, 1}, {-90, 5}, {160, 5}, {160, -2}}, color = {0, 127, 255}));
  connect(dmy_const_dmFuel.y, perf001.dm_fuel_in) annotation(
    Line(points = {{150, -60}, {164, -60}, {164, -56}, {170, -56}, {170, -56}}, color = {0, 0, 127}));
  connect(ramp_m_flow_fuel.y, moltenSaltReactor1.u_m_flow_fuel) annotation(
    Line(points = {{22, 30}, {24, 30}, {24, 26}, {28, 26}, {28, 26}}, color = {0, 0, 127}));
  connect(flightToEngine1.V_tot_out, Inlt010.V_tot_in) annotation(
    Line(points = {{-79, -13}, {-67, -13}}, color = {0, 0, 127}));
  connect(flightToEngine1.port_fluid2Eng, Inlt010.port_1) annotation(
    Line(points = {{-80, -1}, {-68, -1}}, color = {0, 127, 255}));
  connect(Inlt010.port_2, Cmp020.port_1) annotation(
    Line(points = {{-50, -1}, {-40, -1}, {-40, -1}, {-40, -1}}, color = {0, 127, 255}));
  connect(Inlt010.Fram_out, perf001.Fram_in) annotation(
    Line(points = {{-53, -13}, {-44, -13}, {-44, -47}, {169, -47}}, color = {0, 0, 127}));
  annotation(
    uses(Modelica(version = "3.2.2")),
    Diagram(coordinateSystem(extent = {{-100, -60}, {200, 100}}, initialScale = 0.1)),
    Icon(coordinateSystem(extent = {{-100, -100}, {200, 100}})),
    version = "",
    __OpenModelica_commandLineOptions = "",
    experiment(StartTime = 0, StopTime = 100, Tolerance = 1e-06, Interval = 0.05),
    __OpenModelica_simulationFlags(lv = "LOG_STATS", s = "dassl", outputFormat = "mat"));
end NukeTurbojet;
